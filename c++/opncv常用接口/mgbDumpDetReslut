 if(frame.item->source_type == FrameInfo::SourceType::Flush)
                    {
                        continue;
                    }
                    auto out_tensor = frame.image->get();
                    size_t idx = (*frame.index)();
                    auto& image_data = frame.image->get();
                    auto sub_data = out_tensor[{{idx, idx + 1},
                                                {0, image_data.shape(1)},
                                                {0, image_data.shape(2)}}];
                    g_common_logger->error("image_data.shape:{},{}",image_data.shape(1),image_data.shape(2));
                    auto data =sub_data;
                    mgsdk::mgb::Tensor dst_copy(MGBC_CPU);
                    dst_copy.copy_from(data).sync();
                    std::cout << dst_copy.shape(1) << ", " << dst_copy.shape(2) << std::endl;
                    cv::Mat full(dst_copy.shape(1), dst_copy.shape(2), CV_8UC3,
                        reinterpret_cast<uint8_t*>(dst_copy.data_ptr()));
                    for(auto item: frame.item->items){
                        cv::rectangle(full,
                        cv::Point{int(item->bbox().left),
                        int(item->bbox().top)},
                        cv::Point{int(item->bbox().right),
                        int(item->bbox().bottom)}, cv::Scalar(255, 0, 0), 2);
                        
                            // sub_data.copy_from_fixlayout(image_data);
                    }
                                            static int id = 0;

                    cv::imwrite("input_" +m_type+"_" +std::to_string(id++) + ".jpg", full);
