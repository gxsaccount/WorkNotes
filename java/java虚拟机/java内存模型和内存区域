内存区域：
运行时数据区域：方法区，堆，虚拟机栈，本地方法栈，程序计数器

Java内存模型的主要目标是定义程序中各个变量的访问规则，即在JVM中将变量存储到内存和从内存中取出变量这样的底层细节。
JMM规定了所有的变量都存储在主内存（Main Memory）中。每个线程还有自己的工作内存（Working Memory）,线程的工作内存中保存了该线程使用到的变量的主内存的副
本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量（volatile变量仍然有工作内存的拷贝，但是由于它特殊的操作
顺序性规定，所以看起来如同直接在主内存中读写访问一般）。不同的线程之间也无法直接访问对方工作内存中的变量，线程之间值的传递都需要通过主内存来完成。

多个java线程都有自己的工作的内存，通过save和load在主内存中交换共享变量。

Java内存模型是围绕着并发编程中原子性、可见性、有序性这三个特征来建立的。

原子性：一个操作不能被打断，要么全部执行完毕，要么不执行。
可见性：一个线程对共享变量做了修改之后，其他的线程立即能够看到（感知到）该变量这种修改（变化）。
有序性：线程内表现为串行语义，多个线程则不是。指令重排”现象和“工作内存和主内存同步延迟”现象。

happens-before原则：
如果说操作A先行发生于操作B，操作A产生的影响能被操作B观察到，“影响”包含了修改了内存中共享变量的值、发送了消息、调用了方法等。
