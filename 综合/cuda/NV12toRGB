#include <npp.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <nppi_support_functions.h>
#include <nppi_color_conversion.h>
#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include <cuda_runtime.h>
#include <cuda_runtime_api.h>
#include <opencv2/core/cuda.hpp>
// #include <nppi_color_conversion.h>
#include <fstream>
#include <iostream>

int read(char *yuv_img, int cols = 1080, int rows = 1920)
{
    std::ifstream inFile("nv12.yuv", std::ios::in | std::ios::binary); //二进制读方式打开
    int allbytes =0;
    while (inFile.read(yuv_img, sizeof(cols * rows * 3 / 2 * sizeof(char))))
    {                                      //一直读到文件结束
        allbytes+= inFile.gcount(); //看刚才读了多少字节
    }
    std::cout<<allbytes<<std::endl;
    inFile.close();
    return 0;
}
int cvt_yuv_torgb(char *yuv, char* out_buffer,int cols = 1080, int rows = 1920, int channel = 3)
{

    std::cout<<std::endl;
    cudaError_t copy_ret;
    NppStatus ret;


    void *dst_ptr;
    void *src_ptr_Y;
    void *src_ptr_UV;
    cudaMalloc(&dst_ptr, 1920 * 1080 * 3);

    cudaMalloc(&src_ptr_Y, 1920 * 1080 );
    cudaMalloc(&src_ptr_UV, 1920 * 590);
    copy_ret = cudaMemcpy(
        src_ptr_Y,
        yuv,
        1920 * 1080,
        cudaMemcpyHostToDevice);
    std::cout << "cudaMemcpy: " << copy_ret << std::endl;
    copy_ret = cudaMemcpy(
        src_ptr_UV,
        yuv + 1920 * 1080,
        1920 * 590,
        cudaMemcpyHostToDevice);

    std::cout << "cudaMemcpy: " << copy_ret << std::endl;
    const Npp8u *d_ptrs[2] = {
        static_cast<const Npp8u *>(src_ptr_Y),
        static_cast<const Npp8u *>(src_ptr_UV)};

    ret = nppiNV12ToRGB_8u_P2C3R(
        d_ptrs,
        1920,
        static_cast<Npp8u *>(dst_ptr),
        1920 * 3,
        {1920, 1080});
    std::cout << "nppiNV12ToRGB_8u_P2C3R: " << ret << std::endl;
    copy_ret = cudaMemcpy(
        out_buffer,
        dst_ptr,
        1920 * 1080*3,
        cudaMemcpyDeviceToHost);
    std::cout << "cudaMemcpy: " << copy_ret << std::endl;
    cv::Mat out_img(1080, 1920, CV_8UC3, &out_buffer[0]);
    cv::imwrite("out_gx.jpg", out_img);
    return 0;
}
int cvt_yuv_torgb1(char *yuv, int cols = 1080, int rows = 1920, int channel = 1)
{
    cudaError_t copy_ret;
    NppStatus ret = NPP_SUCCESS;

    int stepYuvP1, stepYuvP2;
    //nv12格式变化
    Npp8u *m_stYuvP1 = nppiMalloc_8u_C1(cols, rows, &stepYuvP1);
    Npp8u *m_stYuvP2 = nppiMalloc_8u_C1(cols, rows, &stepYuvP2);
    // Npp8u *m_stYuvP3 = nppiMalloc_8u_C1(cols / 2, rows / 2, &stepYuvP3);
    int d_steps[2] = {stepYuvP1, stepYuvP2};
    Npp8u *d_ptrs[2] = {m_stYuvP1, m_stYuvP2};
    std::cout << "cudaMemcpy2D: " << copy_ret << std::endl;
    cudaMemcpy2D(
        d_ptrs,
        stepYuvP1,
        yuv,
        cols * channel * sizeof(char),
        cols,
        rows,
        cudaMemcpyHostToDevice);

    int stepSource;
    Npp8u *d_frame = nppiMalloc_8u_C3(cols, rows, &stepSource);
    NppiSize ROI1 = {cols, rows};
    ret = nppiNV12ToRGB_8u_P2C3R(
        d_ptrs,
        stepYuvP1,
        d_frame,
        stepSource,
        ROI1);
    std::cout << "nppiNV12ToRGB_8u_P2C3R: " << ret << std::endl;

    uint8_t *h_frame = (uint8_t *)malloc(cols * rows * channel);
    copy_ret = cudaMemcpy2D(
        h_frame,
        rows * channel,
        d_frame,
        stepSource,
        cols * channel,
        rows,
        cudaMemcpyDeviceToHost);
    std::cout << "cudaMemcpy2D: " << copy_ret << std::endl;
    cv::Mat out1 = cv::Mat(rows, cols, CV_8UC3, h_frame, rows * channel);
    cv::imwrite("nv12torgb.png", out1);
    return 0;
}
int main()
{
    char* out_buffer = new char[1920*1080*3];
    // memset(out_buffer, 255, 1920 * 1080 * 3);
    char*  yuv_img= new char[3110400];
    // memset(yuv_img,0,3110400*sizeof(char));
    int cols = 1080, rows = 1920;
    // read(yuv_img, cols, rows);
    // ifstream fs("1.data",std::ifstream::binary);
    std::ifstream inFile("nv12.yuv", std::ios::binary); //二进制读方式打开
    int allbytes =0;
    inFile.read(yuv_img, 3110400*sizeof(char));
    inFile.close();
    cvt_yuv_torgb(yuv_img,out_buffer, 1080, 1920);
    return 0;
}
